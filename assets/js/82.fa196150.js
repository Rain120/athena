(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{546:function(t,e,a){"use strict";a.r(e);var s=a(23),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"节点-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点-node"}},[t._v("#")]),t._v(" 节点(Node)")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("Node")]),t._v(" union type represents all of the different types of nodes that occur in a Slate document tree.")]),t._v(" "),a("p",[a("code",[t._v("Node")]),t._v(" 的联合类型表示出现在 "),a("code",[t._v("Slate")]),t._v(" 文档树中的所有不同类型的节点。")]),t._v(" "),a("div",{staticClass:"language-typescript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Editor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Element "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Descendant")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Element "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ancestor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Editor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" Element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h2",{attrs:{id:"静态方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态方法"}},[t._v("#")]),t._v(" 静态方法")]),t._v(" "),a("h4",{attrs:{id:"node-ancestor-root-node-path-path-ancestor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-ancestor-root-node-path-path-ancestor"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.ancestor(root: Node, path: Path): Ancestor")])]),t._v(" "),a("p",[t._v("Get the node at a specific "),a("code",[t._v("path")]),t._v(", asserting that it is an ancestor node. If the specified node is not an ancestor node, throw an error.")]),t._v(" "),a("p",[t._v("获取特定路径 "),a("code",[t._v("(Path)")]),t._v(" 上的节点，并断言它是祖先节点。如果指定的节点不是祖先节点，则抛出错误。")]),t._v(" "),a("h4",{attrs:{id:"node-ancestors-root-node-path-path-options-generator-nodeentry-ancestor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-ancestors-root-node-path-path-options-generator-nodeentry-ancestor"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.ancestors(root: Node, path: Path, options?): Generator<NodeEntry<Ancestor>>")])]),t._v(" "),a("p",[t._v("Return a generator of all the ancestor nodes above a specific path. By default, the order is bottom-up, from lowest to highest ancestor in the tree, but you can pass the "),a("code",[t._v("reverse: true")]),t._v(" option to go top-down.")]),t._v(" "),a("p",[t._v("返回特定路径上所有祖先节点的生成器。默认情况下，顺序是"),a("strong",[t._v("自下而上")]),t._v("的，从树中最低的祖先到最高的祖先，但是您可以传递 "),a("code",[t._v("reverse: true")]),t._v(" 配置来让它实现自上而下的操作。")]),t._v(" "),a("p",[t._v("参数列表:")]),t._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\treverse"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h4",{attrs:{id:"node-child-root-node-index-number-descendant"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-child-root-node-index-number-descendant"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.child(root: Node, index: number): Descendant")])]),t._v(" "),a("p",[t._v("Get the child of a node at the specified "),a("code",[t._v("index")]),t._v(".")]),t._v(" "),a("p",[t._v("获取指定 "),a("strong",[t._v("索引(index)")]),t._v(" 处的节点的子节点")]),t._v(" "),a("h4",{attrs:{id:"node-children-root-node-path-path-options-generator-nodeentry-descendant"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-children-root-node-path-path-options-generator-nodeentry-descendant"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.children(root: Node, path: Path, options?): Generator<NodeEntry<Descendant>>")])]),t._v(" "),a("p",[t._v("Iterate over the children of a node at a specific path.")]),t._v(" "),a("p",[t._v("遍历特定路径上节点的子节点。")]),t._v(" "),a("p",[t._v("参数列表:")]),t._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\treverse"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h4",{attrs:{id:"node-common-root-node-path-path-another-path-nodeentry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-common-root-node-path-path-another-path-nodeentry"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.common(root: Node, path: Path, another: Path): NodeEntry")])]),t._v(" "),a("p",[t._v("Get an entry for the common ancestor node of two paths.")]),t._v(" "),a("p",[t._v("获取两条路径的公共祖先节点的条目")]),t._v(" "),a("h4",{attrs:{id:"node-descendant-root-node-path-path-descendant"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-descendant-root-node-path-path-descendant"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.descendant(root: Node, path: Path): Descendant")])]),t._v(" "),a("p",[t._v("Get the node at a specific path, asserting that it's a descendant node.")]),t._v(" "),a("p",[t._v("获取特定路径上的节点，并断言它是一个后代节点。")]),t._v(" "),a("h4",{attrs:{id:"node-descendants-root-node-options-generator-nodeentry-descendant"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-descendants-root-node-options-generator-nodeentry-descendant"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.descendants(root: Node, options?): Generator<NodeEntry<Descendant>>")])]),t._v(" "),a("p",[t._v("Return a generator of all the descendant node entries inside a root node. Each iteration will return a "),a("code",[t._v("NodeEntry")]),t._v(" tuple consisting of "),a("code",[t._v("[Node, Path]")]),t._v(".")]),t._v(" "),a("p",[t._v("返回根节点内所有后代节点条目的生成器。 每次迭代将返回一个由 "),a("code",[t._v("[Node，Path]")]),t._v(" 组成的 "),a("code",[t._v("NodeEntry")]),t._v(" 元组。")]),t._v(" "),a("p",[t._v("参数列表:")]),t._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tto"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\treverse"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tpass"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("node")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" NodeEntry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h4",{attrs:{id:"node-elements-root-node-options-generator-elemententry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-elements-root-node-options-generator-elemententry"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.elements(root: Node, options?): Generator<ElementEntry>")])]),t._v(" "),a("p",[t._v("Return a generator of all the element nodes inside a root node. Each iteration will return an "),a("code",[t._v("ElementEntry")]),t._v(" tuple consisting of "),a("code",[t._v("[Element, Path]")]),t._v(". If the root node is an element, it will be included in the iteration as well.")]),t._v(" "),a("p",[t._v("返回根节点内所有元素节点的生成器。 每次迭代将返回一个由 "),a("code",[t._v("[Element，Path]")]),t._v(" 组成的 "),a("code",[t._v("ElementEntry")]),t._v(" 元组。 如果根节点是一个元素，则它也将包含在迭代中。")]),t._v(" "),a("p",[t._v("参数列表:")]),t._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tto"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\treverse"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tpass"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("node")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" NodeEntry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h4",{attrs:{id:"node-first-root-node-path-path-nodeentry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-first-root-node-path-path-nodeentry"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.first(root: Node, path: Path): NodeEntry")])]),t._v(" "),a("p",[t._v("Get the first node entry in a root node from a "),a("code",[t._v("path")]),t._v(".")]),t._v(" "),a("p",[t._v("从路径获取根节点中的第一个节点条目。")]),t._v(" "),a("h4",{attrs:{id:"node-fragment-root-node-range-range-descendant"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-fragment-root-node-range-range-descendant"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.fragment(root: Node, range: Range): Descendant[]")])]),t._v(" "),a("p",[t._v("Get the sliced fragment represented by the "),a("code",[t._v("range")]),t._v(".")]),t._v(" "),a("p",[t._v("获取范围表示的切片片段。")]),t._v(" "),a("h4",{attrs:{id:"node-get-root-node-path-path-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-get-root-node-path-path-node"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.get(root: Node, path: Path): Node")])]),t._v(" "),a("p",[t._v("Get the descendant node referred to by a specific "),a("code",[t._v("path")]),t._v(". If the path is an empty array, get the root node itself.")]),t._v(" "),a("p",[t._v("获取特定路径引用的后代节点。 如果路径是空数组，请获取根节点本身。")]),t._v(" "),a("h4",{attrs:{id:"node-has-root-node-path-path-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-has-root-node-path-path-boolean"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.has(root: Node, path: Path): boolean")])]),t._v(" "),a("p",[t._v("Check if a descendant node exists at a specific "),a("code",[t._v("path")]),t._v(".")]),t._v(" "),a("p",[t._v("检查特定路径上是否存在子代节点。")]),t._v(" "),a("h4",{attrs:{id:"node-isnode-value-any-value-is-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-isnode-value-any-value-is-node"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.isNode(value: any): value is Node")])]),t._v(" "),a("p",[t._v("Check if a "),a("code",[t._v("value")]),t._v(" implements the "),a("code",[t._v("Node")]),t._v(" interface.")]),t._v(" "),a("p",[t._v("是否是"),a("code",[t._v("Node")]),t._v(" 对象。")]),t._v(" "),a("h4",{attrs:{id:"node-isnodelist-value-any-value-is-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-isnodelist-value-any-value-is-node"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.isNodeList(value: any): value is Node[]")])]),t._v(" "),a("p",[t._v("Check if a "),a("code",[t._v("value")]),t._v(" is a list of "),a("code",[t._v("Node")]),t._v(" objects.")]),t._v(" "),a("p",[t._v("是否是"),a("code",[t._v("Node")]),t._v("对象的列表。")]),t._v(" "),a("h4",{attrs:{id:"node-last-root-node-path-path-nodeentry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-last-root-node-path-path-nodeentry"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.last(root: Node, path: Path): NodeEntry")])]),t._v(" "),a("p",[t._v("Get the last node entry in a root node at a specific "),a("code",[t._v("path")]),t._v(".")]),t._v(" "),a("p",[t._v("获取根节点中特定路径下的最后一个节点。")]),t._v(" "),a("h4",{attrs:{id:"node-leaf-root-node-path-path-text"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-leaf-root-node-path-path-text"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.leaf(root: Node, path: Path): Text")])]),t._v(" "),a("p",[t._v("Get the node at a specific "),a("code",[t._v("path")]),t._v(", ensuring it's a leaf text node. If the node is not a leaf text node, throw an error.")]),t._v(" "),a("p",[t._v("获取特定路径上的节点，确保它是一个叶文本节点。如果节点不是叶文本节点，则抛出错误。")]),t._v(" "),a("h4",{attrs:{id:"node-levels-root-node-path-path-options-generator-nodeentry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-levels-root-node-path-path-options-generator-nodeentry"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.levels(root: Node, path: Path, options?): Generator<NodeEntry>")])]),t._v(" "),a("p",[t._v("Return a generator of the nodes in a branch of the tree, from a specific "),a("code",[t._v("path")]),t._v(". By default, the order is top-down, from the lowest to the highest node in the tree, but you can pass the "),a("code",[t._v("reverse: true")]),t._v(" option to go bottom-up.")]),t._v(" "),a("p",[t._v("从特定路径返回树的一个分支中的节点的生成器。默认情况下，顺序是自顶向下的，从树中的最低节点到最高节点，但是您可以传递 "),a("code",[t._v("reverse: true")]),t._v(" 配置来让它实现自底向上的操作。")]),t._v(" "),a("p",[t._v("参数列表:")]),t._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\treverse"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h4",{attrs:{id:"node-matches-root-node-props-partial-node-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-matches-root-node-props-partial-node-boolean"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.matches(root: Node, props: Partial<Node>): boolean")])]),t._v(" "),a("p",[t._v("Check if a node matches a set of "),a("code",[t._v("props")]),t._v(".")]),t._v(" "),a("p",[t._v("检查一个节点是否匹配 "),a("code",[t._v("props")]),t._v(" 集合。")]),t._v(" "),a("h4",{attrs:{id:"node-nodes-root-node-options-generator-nodeentry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-nodes-root-node-options-generator-nodeentry"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.nodes(root: Node, options?): Generator<NodeEntry>")])]),t._v(" "),a("p",[t._v("Return a generator of all the node entries of a root node. Each entry is returned as a "),a("code",[t._v("[Node, Path]")]),t._v(" tuple, with the path referring to the node's position inside the root node.")]),t._v(" "),a("p",[t._v("返回一个根节点的所有节点入口的生成器。每个指向根节点中节点的位置的路径都会返回 "),a("code",[t._v("[Node, Path]")]),t._v(" 数组类型。")]),t._v(" "),a("p",[t._v("参数列表:")]),t._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tto"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\treverse"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tpass"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("node")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" NodeEntry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h4",{attrs:{id:"node-parent-root-node-path-path-ancestor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-parent-root-node-path-path-ancestor"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.parent(root: Node, path: Path): Ancestor")])]),t._v(" "),a("p",[t._v("Get the parent of a node at a specific "),a("code",[t._v("path")]),t._v(".")]),t._v(" "),a("p",[t._v("获取特定路径上节点的父节点。")]),t._v(" "),a("h4",{attrs:{id:"node-string-root-node-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-string-root-node-string"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.string(root: Node): string")])]),t._v(" "),a("p",[t._v("Get the concatenated text string of a node's content. Note that this will not include spaces or line breaks between block nodes. This is not intended as a user-facing string, but as a string for performing offset-related computations for a node.")]),t._v(" "),a("p",[t._v("获取节点内容的连接文本字符串。注意，这将不包括块节点之间的空格或换行符。它不是用户使用的字符串，而是用于执行与偏移量相关的节点计算的字符串。")]),t._v(" "),a("h4",{attrs:{id:"node-texts-root-node-options-generator-nodeentry-text"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-texts-root-node-options-generator-nodeentry-text"}},[t._v("#")]),t._v(" "),a("code",[t._v("Node.texts(root: Node, options?): Generator<NodeEntry<Text>>")])]),t._v(" "),a("p",[t._v("Return a generator of all leaf text nodes in a root node.")]),t._v(" "),a("p",[t._v("返回根节点中所有叶子文本节点的生成器。")]),t._v(" "),a("p",[t._v("参数列表:")]),t._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tto"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\treverse"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tpass"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("node")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" NodeEntry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h2",{attrs:{id:"editor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#editor"}},[t._v("#")]),t._v(" Editor")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("Editor")]),t._v(" object stores all the state of a slate editor. It can be extended by plugins to add helpers and implement new behaviors.")]),t._v(" "),a("p",[a("code",[t._v("Editor")]),t._v(" 对象存储 "),a("code",[t._v("Slate")]),t._v(" 的所有状态。你可以通过插件扩展来添加辅助函数和实现新的行为。")]),t._v(" "),a("div",{staticClass:"language-typescript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Editor")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    children"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    selection"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Range "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    operations"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Operation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    marks"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Record"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("unknown")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Schema-specific node behaviors.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("isInline")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("isVoid")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("normalizeNode")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("entry"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" NodeEntry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onChange")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Overrideable core actions.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("addMark")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("operation"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Operation"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    deleteBackward"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unit"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'character'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'word'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'line'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'block'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    deleteForward"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unit"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'character'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'word'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'line'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'block'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("deleteFragment")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("insertBreak")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("insertFragment")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fragment"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("insertNode")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("insertText")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("removeMark")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br")])]),a("h3",{attrs:{id:"实例方法-instance-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例方法-instance-methods"}},[t._v("#")]),t._v(" 实例方法(Instance methods)")]),t._v(" "),a("h4",{attrs:{id:"特定架构操作-schema-specific-actions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特定架构操作-schema-specific-actions"}},[t._v("#")]),t._v(" 特定架构操作(Schema-specific actions)")]),t._v(" "),a("p",[a("strong",[t._v("译者 📒")]),t._v(":  "),a("RouterLink",{attrs:{to:"/zh/slate/note/selection-range.html#选区-selection"}},[t._v("Here")]),t._v(" 有关于选择"),a("code",[t._v("(selection)")]),t._v("的一些个人学习总结，欢迎一起讨论。")],1),t._v(" "),a("h4",{attrs:{id:"isinline-element-element"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isinline-element-element"}},[t._v("#")]),t._v(" "),a("code",[t._v("isInline(element: Element)")])]),t._v(" "),a("p",[t._v("Check if a value is an inline "),a("code",[t._v("Element")]),t._v(" object.")]),t._v(" "),a("p",[t._v("检查 "),a("code",[t._v("value")]),t._v(" 是否为内联 "),a("code",[t._v("Element")]),t._v(" 对象。")]),t._v(" "),a("h4",{attrs:{id:"isvoid-element-element"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isvoid-element-element"}},[t._v("#")]),t._v(" "),a("code",[t._v("isVoid(element: Element)")])]),t._v(" "),a("p",[t._v("Check if a value is a void "),a("code",[t._v("Element")]),t._v(" object.")]),t._v(" "),a("p",[t._v("检查 "),a("code",[t._v("value")]),t._v(" 是否为空 "),a("code",[t._v("Element")]),t._v(" 对象。")]),t._v(" "),a("h4",{attrs:{id:"normalizenode-entry-nodeentry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#normalizenode-entry-nodeentry"}},[t._v("#")]),t._v(" "),a("code",[t._v("normalizeNode(entry: NodeEntry)")])]),t._v(" "),a("p",[t._v("Normalize a Node according to the schema.")]),t._v(" "),a("p",[t._v("根据 "),a("code",[t._v("schema")]),t._v(" 对节点 "),a("code",[t._v("(Node)")]),t._v(" 进行规范化。")]),t._v(" "),a("h4",{attrs:{id:"onchange"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#onchange"}},[t._v("#")]),t._v(" "),a("code",[t._v("onChange()")])]),t._v(" "),a("h4",{attrs:{id:"核心操作-core-actions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#核心操作-core-actions"}},[t._v("#")]),t._v(" 核心操作(Core actions)")]),t._v(" "),a("h4",{attrs:{id:"addmark-key-string-value-any"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#addmark-key-string-value-any"}},[t._v("#")]),t._v(" "),a("code",[t._v("addMark(key: string, value: any)")])]),t._v(" "),a("p",[t._v("Add a custom property to the leaf text nodes in the current selection. If the selection is currently collapsed, the marks will be added to the "),a("code",[t._v("editor.marks")]),t._v(" property instead, and applied when text is inserted next.")]),t._v(" "),a("p",[t._v("将自定义属性添加到"),a("code",[t._v("(selection)")]),t._v("中的叶文本节点。 如果选择当前处于折叠状态，则标记将改为添加到 "),a("code",[t._v("editor.marks")]),t._v(" 属性上，并在下一次插入文本时应用。")]),t._v(" "),a("h4",{attrs:{id:"removemark-key-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#removemark-key-string"}},[t._v("#")]),t._v(" "),a("code",[t._v("removeMark(key: string)")])]),t._v(" "),a("p",[t._v("Remove a custom property from the leaf text nodes in the current selection.")]),t._v(" "),a("p",[t._v("从"),a("code",[t._v("(selection)")]),t._v("的叶子文本节点中"),a("strong",[t._v("删除自定义属性")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"deletebackward-options-unit-character-word-line-block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deletebackward-options-unit-character-word-line-block"}},[t._v("#")]),t._v(" "),a("code",[t._v("deleteBackward(options?: {unit?: 'character' | 'word' | 'line' | 'block'})")])]),t._v(" "),a("p",[t._v("Delete content in the editor backward from the current selection.")]),t._v(" "),a("p",[t._v("从"),a("code",[t._v("(selection)")]),t._v("中 "),a("strong",[t._v("向后")]),t._v(" 删除 "),a("code",[t._v("editor")]),t._v(" 中的内容。")]),t._v(" "),a("h4",{attrs:{id:"deleteforward-options-unit-character-word-line-block"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deleteforward-options-unit-character-word-line-block"}},[t._v("#")]),t._v(" "),a("code",[t._v("deleteForward(options?: {unit?: 'character' | 'word' | 'line' | 'block'})")])]),t._v(" "),a("p",[t._v("Delete content in the editor forward from the current selection.")]),t._v(" "),a("p",[t._v("从"),a("code",[t._v("(selection)")]),t._v("中 "),a("strong",[t._v("向前")]),t._v(" 删除 "),a("code",[t._v("editor")]),t._v(" 中的内容。")]),t._v(" "),a("h4",{attrs:{id:"insertfragment-fragment-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#insertfragment-fragment-node"}},[t._v("#")]),t._v(" "),a("code",[t._v("insertFragment(fragment: Node[])")])]),t._v(" "),a("p",[t._v("Insert a fragment at the current selection. If the selection is currently expanded, delete it first.")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("(selection)")]),t._v("的地方插入一个片段。 如果"),a("code",[t._v("(selection)")]),t._v("的已展开，请首先将其删除。")]),t._v(" "),a("h4",{attrs:{id:"deletefragment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deletefragment"}},[t._v("#")]),t._v(" "),a("code",[t._v("deleteFragment()")])]),t._v(" "),a("p",[t._v("Delete the content of the current selection.")]),t._v(" "),a("p",[t._v("删除"),a("code",[t._v("(selection)")]),t._v("的内容。")]),t._v(" "),a("h4",{attrs:{id:"insertbreak"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#insertbreak"}},[t._v("#")]),t._v(" "),a("code",[t._v("insertBreak()")])]),t._v(" "),a("p",[t._v("Insert a block break at the current selection. If the selection is currently expanded, delete it first.")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("(selection)")]),t._v("处插入一个换行符。 如果"),a("code",[t._v("(selection)")]),t._v("的已展开，请首先将其删除。")]),t._v(" "),a("h4",{attrs:{id:"insertnode-node-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#insertnode-node-node"}},[t._v("#")]),t._v(" "),a("code",[t._v("insertNode(node: Node)")])]),t._v(" "),a("p",[t._v("Insert a node at the current selection. If the selection is currently expanded, delete it first.")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("(selection)")]),t._v("处插入一个节点。如果"),a("code",[t._v("(selection)")]),t._v("的已展开，请首先将其删除。")]),t._v(" "),a("h4",{attrs:{id:"inserttext-text-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inserttext-text-string"}},[t._v("#")]),t._v(" "),a("code",[t._v("insertText(text: string)")])]),t._v(" "),a("p",[t._v("Insert text at the current selection. If the selection is currently expanded, delete it first.")]),t._v(" "),a("p",[t._v("在"),a("code",[t._v("(selection)")]),t._v("处插入一个文本节点。如果"),a("code",[t._v("(selection)")]),t._v("的已展开，请首先将其删除。")]),t._v(" "),a("h4",{attrs:{id:"apply-operation-operation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#apply-operation-operation"}},[t._v("#")]),t._v(" "),a("code",[t._v("apply(operation: Operation)")])]),t._v(" "),a("p",[t._v("Apply an operation in the editor.")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("editor")]),t._v(" 中应用一个"),a("code",[t._v("op")]),t._v("操作。")]),t._v(" "),a("h2",{attrs:{id:"元素-element"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元素-element"}},[t._v("#")]),t._v(" 元素(Element)")]),t._v(" "),a("p",[a("code",[t._v("Element")]),t._v(" objects are a type of node in a Slate document that contain other "),a("code",[t._v("Element")]),t._v(" nodes or "),a("code",[t._v("Text")]),t._v(' nodes. They can be either "blocks" or "inlines" depending on the Slate editor\'s configuration.')]),t._v(" "),a("p",[a("code",[t._v("Element")]),t._v(" 对象是 "),a("code",[t._v("Slate")]),t._v(" 文档中包含其他 "),a("code",[t._v("Element")]),t._v(" 节点或 "),a("code",[t._v("Text")]),t._v(" 节点的一种类型。 根据 "),a("code",[t._v("Slate")]),t._v(" 的配置，它们可以是“块("),a("code",[t._v("block")]),t._v(")”或“内联("),a("code",[t._v("inline")]),t._v(")”。")]),t._v(" "),a("div",{staticClass:"language-typescript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Element")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    children"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("unknown")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h3",{attrs:{id:"static-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static-methods"}},[t._v("#")]),t._v(" Static methods")]),t._v(" "),a("h4",{attrs:{id:"element-iselement-value-any-value-is-element"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-iselement-value-any-value-is-element"}},[t._v("#")]),t._v(" "),a("code",[t._v("Element.isElement(value: any): value is Element")])]),t._v(" "),a("p",[t._v("Check if a "),a("code",[t._v("value")]),t._v(" implements the "),a("code",[t._v("Element")]),t._v(" interface.")]),t._v(" "),a("p",[t._v("检查一个 "),a("code",[t._v("value")]),t._v(" 是否是 "),a("code",[t._v("Element")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"element-iselementlist-value-any-value-is-element"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-iselementlist-value-any-value-is-element"}},[t._v("#")]),t._v(" "),a("code",[t._v("Element.isElementList(value: any): value is Element[]")])]),t._v(" "),a("p",[t._v("Check if a "),a("code",[t._v("value")]),t._v(" is an array of "),a("code",[t._v("Element")]),t._v(" objects.")]),t._v(" "),a("p",[t._v("检查一个 "),a("code",[t._v("value")]),t._v(" 是否是 "),a("code",[t._v("Element")]),t._v(" 数组。")]),t._v(" "),a("h4",{attrs:{id:"element-matches-element-element-props-partial-element-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element-matches-element-element-props-partial-element-boolean"}},[t._v("#")]),t._v(" "),a("code",[t._v("Element.matches(element: Element, props: Partial<Element>): boolean")])]),t._v(" "),a("p",[t._v("Check if an element matches a set of "),a("code",[t._v("props")]),t._v(". Note: This checks custom properties, but it does not ensure that any children are equivalent.")]),t._v(" "),a("p",[t._v("检查元素"),a("code",[t._v("(Element)")]),t._v("是否匹配 "),a("code",[t._v("props")]),t._v(" 集合。 注意：这会检查自定义属性，但不能确保任何子级都相等。")]),t._v(" "),a("h2",{attrs:{id:"文本-text"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文本-text"}},[t._v("#")]),t._v(" 文本(Text)")]),t._v(" "),a("p",[a("code",[t._v("Text")]),t._v(" objects represent the nodes that contain the actual text content of a Slate document along with any formatting properties. They are always leaf nodes in the document tree as they cannot contain any children.")]),t._v(" "),a("p",[a("code",[t._v("Text")]),t._v(" 对象表示包含 "),a("code",[t._v("Slate")]),t._v(" 文档的实际文本内容以及任何格式设置属性的节点。 它们始终是文档树中的叶节点，因为它们不能包含任何子节点。")]),t._v(" "),a("div",{staticClass:"language-typescript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Text")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("unknown")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h3",{attrs:{id:"static-methods-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static-methods-2"}},[t._v("#")]),t._v(" Static methods")]),t._v(" "),a("h4",{attrs:{id:"text-equals-text-text-another-text-options-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#text-equals-text-text-another-text-options-boolean"}},[t._v("#")]),t._v(" "),a("code",[t._v("Text.equals(text: Text, another: Text, options?): boolean")])]),t._v(" "),a("p",[t._v("Check if two text nodes are equal.")]),t._v(" "),a("p",[t._v("检查两个 "),a("code",[t._v("Text")]),t._v(" 节点是否相等。")]),t._v(" "),a("p",[t._v("参数列表:")]),t._v(" "),a("div",{staticClass:"language-ts line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tloose"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("boolean")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h4",{attrs:{id:"text-istext-value-any-value-is-text"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#text-istext-value-any-value-is-text"}},[t._v("#")]),t._v(" "),a("code",[t._v("Text.isText(value: any): value is Text")])]),t._v(" "),a("p",[t._v("Check if a "),a("code",[t._v("value")]),t._v(" implements the "),a("code",[t._v("Text")]),t._v(" interface.")]),t._v(" "),a("p",[t._v("检查一个 "),a("code",[t._v("value")]),t._v(" 是否是 "),a("code",[t._v("Text")]),t._v("。")]),t._v(" "),a("h4",{attrs:{id:"text-matches-text-text-props-partial-text-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#text-matches-text-text-props-partial-text-boolean"}},[t._v("#")]),t._v(" "),a("code",[t._v("Text.matches(text: Text, props: Partial<Text>): boolean")])]),t._v(" "),a("p",[t._v("Check if a "),a("code",[t._v("text")]),t._v(" matches a set of "),a("code",[t._v("props")]),t._v(".")]),t._v(" "),a("p",[t._v("检查文本 "),a("code",[t._v("(Text)")]),t._v(" 是否匹配 "),a("code",[t._v("props")]),t._v(" 集合。")]),t._v(" "),a("h4",{attrs:{id:"text-decorations-node-text-decorations-range-text"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#text-decorations-node-text-decorations-range-text"}},[t._v("#")]),t._v(" "),a("code",[t._v("Text.decorations(node: Text, decorations: Range[]): Text[]")])]),t._v(" "),a("p",[t._v("Get the leaves for a text node, given "),a("code",[t._v("decorations")]),t._v(".")]),t._v(" "),a("p",[t._v("用 "),a("code",[t._v("decorations")]),t._v(" 获取到的文本 "),a("code",[t._v("(Text)")]),t._v(" 节点的叶子节点。")])])}),[],!1,null,null,null);e.default=n.exports}}]);