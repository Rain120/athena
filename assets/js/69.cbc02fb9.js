(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{531:function(t,e,a){"use strict";a.r(e);var s=a(23),o=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"text"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#text"}},[t._v("#")]),t._v(" Text")]),t._v(" "),a("p",[a("code",[t._v("Text")]),t._v(" objects represent the nodes that contain the actual text content of a Slate document along with any formatting properties. They are always leaf nodes in the document tree as they cannot contain any children.")]),t._v(" "),a("div",{staticClass:"language-typescript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-typescript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Text")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/en/slate/nodes/text.html#static-methods"}},[t._v("Static methods")]),t._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"/en/slate/nodes/text.html#retrieval-methods"}},[t._v("Retrieval methods")])],1),t._v(" "),a("li",[a("RouterLink",{attrs:{to:"/en/slate/nodes/text.html#check-methods"}},[t._v("Check methods")])],1)])],1)]),t._v(" "),a("h2",{attrs:{id:"static-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#static-methods"}},[t._v("#")]),t._v(" Static methods")]),t._v(" "),a("h3",{attrs:{id:"retrieval-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#retrieval-methods"}},[t._v("#")]),t._v(" Retrieval methods")]),t._v(" "),a("h4",{attrs:{id:"text-matches-text-text-props-partial-text-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#text-matches-text-text-props-partial-text-boolean"}},[t._v("#")]),t._v(" "),a("code",[t._v("Text.matches(text: Text, props: Partial<Text>) => boolean")])]),t._v(" "),a("p",[t._v("Check if "),a("code",[t._v("text")]),t._v(" matches a set of "),a("code",[t._v("props")]),t._v(".")]),t._v(" "),a("p",[t._v("The way the check works is that it makes sure that (a) all the "),a("code",[t._v("props")]),t._v(" exist in the "),a("code",[t._v("text")]),t._v(", and (b) if it exists, that it exactly matches the properties in the "),a("code",[t._v("text")]),t._v(".")]),t._v(" "),a("p",[t._v("If a "),a("code",[t._v("props.text")]),t._v(" property is passed in, it will be ignored.")]),t._v(" "),a("p",[t._v("If there are properties in "),a("code",[t._v("text")]),t._v(" that are not in "),a("code",[t._v("props")]),t._v(", those will be ignored when it comes to testing for a match.")]),t._v(" "),a("h4",{attrs:{id:"text-decorations-node-text-decorations-range-text"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#text-decorations-node-text-decorations-range-text"}},[t._v("#")]),t._v(" "),a("code",[t._v("Text.decorations(node: Text, decorations: Range[]) => Text[]")])]),t._v(" "),a("p",[t._v("Get the leaves for a text node, given "),a("code",[t._v("decorations")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"check-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check-methods"}},[t._v("#")]),t._v(" Check methods")]),t._v(" "),a("h4",{attrs:{id:"text-equals-text-text-another-text-options-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#text-equals-text-text-another-text-options-boolean"}},[t._v("#")]),t._v(" "),a("code",[t._v("Text.equals(text: Text, another: Text, options?) => boolean")])]),t._v(" "),a("p",[t._v("Check if two text nodes are equal.")]),t._v(" "),a("p",[t._v("Options: "),a("code",[t._v("{loose?: boolean}")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("loose?")]),t._v(": When "),a("code",[t._v("true")]),t._v(", it checks if the properties of the "),a("code",[t._v("Text")]),t._v(" object are equal except for the "),a("code",[t._v("text")]),t._v(" property (i.e. the "),a("code",[t._v("String")]),t._v(" value of the "),a("code",[t._v("Text")]),t._v("). When "),a("code",[t._v("false")]),t._v(" (default), checks all properties including "),a("code",[t._v("text")]),t._v(".")])]),t._v(" "),a("h4",{attrs:{id:"text-istext-value-any-value-is-text"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#text-istext-value-any-value-is-text"}},[t._v("#")]),t._v(" "),a("code",[t._v("Text.isText(value: any) => value is Text")])]),t._v(" "),a("p",[t._v("Check if a "),a("code",[t._v("value")]),t._v(" implements the "),a("code",[t._v("Text")]),t._v(" interface.")]),t._v(" "),a("h4",{attrs:{id:"text-istextlist-value-any-value-is-text"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#text-istextlist-value-any-value-is-text"}},[t._v("#")]),t._v(" "),a("code",[t._v("Text.isTextList(value: any): value is Text[]")])]),t._v(" "),a("p",[t._v("Check if "),a("code",[t._v("value")]),t._v(" is an "),a("code",[t._v("Array")]),t._v(" of only "),a("code",[t._v("Text")]),t._v(" objects.")])])}),[],!1,null,null,null);e.default=o.exports}}]);