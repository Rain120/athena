(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{530:function(e,t,o){"use strict";o.r(t);var a=o(23),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"node"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node"}},[e._v("#")]),e._v(" Node")]),e._v(" "),o("ul",[o("li",[o("RouterLink",{attrs:{to:"/en/slate/nodes/node.html#static-methods"}},[e._v("Static methods")]),e._v(" "),o("ul",[o("li",[o("RouterLink",{attrs:{to:"/en/slate/nodes/node.html#retrieval-methods"}},[e._v("Retrieval methods")])],1),e._v(" "),o("li",[o("RouterLink",{attrs:{to:"/en/slate/nodes/node.html#text-methods"}},[e._v("Text methods")])],1),e._v(" "),o("li",[o("RouterLink",{attrs:{to:"/en/slate/nodes/node.html#check-methods"}},[e._v("Check methods")])],1)])],1)]),e._v(" "),o("h2",{attrs:{id:"static-methods"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#static-methods"}},[e._v("#")]),e._v(" Static methods")]),e._v(" "),o("h3",{attrs:{id:"retrieval-methods"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#retrieval-methods"}},[e._v("#")]),e._v(" Retrieval methods")]),e._v(" "),o("h4",{attrs:{id:"node-ancestor-root-node-path-path-ancestor"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-ancestor-root-node-path-path-ancestor"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.ancestor(root: Node, path: Path) => Ancestor")])]),e._v(" "),o("p",[e._v("Get the node at a specific "),o("code",[e._v("path")]),e._v(", asserting that it is an ancestor node. If the specified node is not an ancestor node, throw an error.")]),e._v(" "),o("h4",{attrs:{id:"node-ancestors-root-node-path-path-options-generator-nodeentry-ancestor"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-ancestors-root-node-path-path-options-generator-nodeentry-ancestor"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.ancestors(root: Node, path: Path, options?) => Generator<NodeEntry<Ancestor>>")])]),e._v(" "),o("p",[e._v("Return a generator of all the ancestor nodes above a specific path. By default, the order is bottom-up, from lowest to highest ancestor in the tree, but you can pass the "),o("code",[e._v("reverse: true")]),e._v(" option to go top-down.")]),e._v(" "),o("p",[e._v("Options: "),o("code",[e._v("{reverse?: boolean}")])]),e._v(" "),o("h4",{attrs:{id:"node-child-root-node-index-number-descendant"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-child-root-node-index-number-descendant"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.child(root: Node, index: number) => Descendant")])]),e._v(" "),o("p",[e._v("Get the child of a node at the specified "),o("code",[e._v("index")]),e._v(".")]),e._v(" "),o("h4",{attrs:{id:"node-children-root-node-path-path-options-generator-nodeentry-descendant"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-children-root-node-path-path-options-generator-nodeentry-descendant"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.children(root: Node, path: Path, options?) => Generator<NodeEntry<Descendant>>")])]),e._v(" "),o("p",[e._v("Iterate over the children of a node at a specific path.")]),e._v(" "),o("p",[e._v("Options: "),o("code",[e._v("{reverse?: boolean}")])]),e._v(" "),o("h4",{attrs:{id:"node-common-root-node-path-path-another-path-nodeentry"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-common-root-node-path-path-another-path-nodeentry"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.common(root: Node, path: Path, another: Path) => NodeEntry")])]),e._v(" "),o("p",[e._v("Get an entry for the common ancestor node of two paths.")]),e._v(" "),o("h4",{attrs:{id:"node-descendant-root-node-path-path-descendant"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-descendant-root-node-path-path-descendant"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.descendant(root: Node, path: Path) => Descendant")])]),e._v(" "),o("p",[e._v("Get the node at a specific path, asserting that it's a descendant node.")]),e._v(" "),o("h4",{attrs:{id:"node-descendants-root-node-options-generator-nodeentry-descendant"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-descendants-root-node-options-generator-nodeentry-descendant"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.descendants(root: Node, options?) => Generator<NodeEntry<Descendant>>")])]),e._v(" "),o("p",[e._v("Return a generator of all the descendant node entries inside a root node. Each iteration will return a "),o("code",[e._v("NodeEntry")]),e._v(" tuple consisting of "),o("code",[e._v("[Node, Path]")]),e._v(".")]),e._v(" "),o("p",[e._v("Options: "),o("code",[e._v("{from?: Path, to?: Path, reverse?: boolean, pass?: (node: NodeEntry => boolean)}")])]),e._v(" "),o("h4",{attrs:{id:"node-elements-root-node-options-generator-elemententry"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-elements-root-node-options-generator-elemententry"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.elements(root: Node, options?) => Generator<ElementEntry>")])]),e._v(" "),o("p",[e._v("Return a generator of all the element nodes inside a root node. Each iteration will return an "),o("code",[e._v("ElementEntry")]),e._v(" tuple consisting of "),o("code",[e._v("[Element, Path]")]),e._v(". If the root node is an element, it will be included in the iteration as well.")]),e._v(" "),o("p",[e._v("Options: "),o("code",[e._v("{from?: Path, to?: Path, reverse?: boolean, pass?: (node: NodeEntry => boolean)}")])]),e._v(" "),o("h4",{attrs:{id:"node-first-root-node-path-path-nodeentry"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-first-root-node-path-path-nodeentry"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.first(root: Node, path: Path) => NodeEntry")])]),e._v(" "),o("p",[e._v("Get the first node entry in a root node from a "),o("code",[e._v("path")]),e._v(".")]),e._v(" "),o("h4",{attrs:{id:"node-fragment-root-node-range-range-descendant"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-fragment-root-node-range-range-descendant"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.fragment(root: Node, range: Range) => Descendant[]")])]),e._v(" "),o("p",[e._v("Get the sliced fragment represented by the "),o("code",[e._v("range")]),e._v(".")]),e._v(" "),o("h4",{attrs:{id:"node-get-root-node-path-path-node"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-get-root-node-path-path-node"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.get(root: Node, path: Path) => Node")])]),e._v(" "),o("p",[e._v("Get the descendant node referred to by a specific "),o("code",[e._v("path")]),e._v(". If the path is an empty array, get the root node itself.")]),e._v(" "),o("h4",{attrs:{id:"node-last-root-node-path-path-nodeentry"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-last-root-node-path-path-nodeentry"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.last(root: Node, path: Path) => NodeEntry")])]),e._v(" "),o("p",[e._v("Get the last node entry in a root node at a specific "),o("code",[e._v("path")]),e._v(".")]),e._v(" "),o("h4",{attrs:{id:"node-leaf-root-node-path-path-text"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-leaf-root-node-path-path-text"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.leaf(root: Node, path: Path) => Text")])]),e._v(" "),o("p",[e._v("Get the node at a specific "),o("code",[e._v("path")]),e._v(", ensuring it's a leaf text node. If the node is not a leaf text node, throw an error.")]),e._v(" "),o("h4",{attrs:{id:"node-levels-root-node-path-path-options-generator-nodeentry"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-levels-root-node-path-path-options-generator-nodeentry"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.levels(root: Node, path: Path, options?) => Generator<NodeEntry>")])]),e._v(" "),o("p",[e._v("Return a generator of the nodes in a branch of the tree, from a specific "),o("code",[e._v("path")]),e._v(". By default, the order is top-down, from the lowest to the highest node in the tree, but you can pass the "),o("code",[e._v("reverse: true")]),e._v(" option to go bottom-up.")]),e._v(" "),o("p",[e._v("Options: "),o("code",[e._v("{reverse?: boolean}")])]),e._v(" "),o("h4",{attrs:{id:"node-nodes-root-node-options-generator-nodeentry"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-nodes-root-node-options-generator-nodeentry"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.nodes(root: Node, options?) => Generator<NodeEntry>")])]),e._v(" "),o("p",[e._v("Return a generator of all the node entries of a root node. Each entry is returned as a "),o("code",[e._v("[Node, Path]")]),e._v(" tuple, with the path referring to the node's position inside the root node.")]),e._v(" "),o("p",[e._v("Options: "),o("code",[e._v("{from?: Path, to?: Path, reverse?: boolean, pass?: (node: NodeEntry => boolean)}")])]),e._v(" "),o("h4",{attrs:{id:"node-parent-root-node-path-path-ancestor"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-parent-root-node-path-path-ancestor"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.parent(root: Node, path: Path) => Ancestor")])]),e._v(" "),o("p",[e._v("Get the parent of a node at a specific "),o("code",[e._v("path")]),e._v(".")]),e._v(" "),o("h3",{attrs:{id:"text-methods"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#text-methods"}},[e._v("#")]),e._v(" Text methods")]),e._v(" "),o("p",[e._v("Methods related to Text.")]),e._v(" "),o("h4",{attrs:{id:"node-string-root-node-string"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-string-root-node-string"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.string(root: Node) => string")])]),e._v(" "),o("p",[e._v("Get the concatenated text string of a node's content. Note that this will not include spaces or line breaks between block nodes. This is not intended as a user-facing string, but as a string for performing offset-related computations for a node.")]),e._v(" "),o("h4",{attrs:{id:"node-texts-root-node-options-generator-nodeentry-text"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-texts-root-node-options-generator-nodeentry-text"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.texts(root: Node, options?) => Generator<NodeEntry<Text>>")])]),e._v(" "),o("p",[e._v("Return a generator of all leaf text nodes in a root node.")]),e._v(" "),o("p",[e._v("Options: "),o("code",[e._v("{from?: Path, to?: Path, reverse?: boolean, pass?: (node: NodeEntry => boolean)}")])]),e._v(" "),o("h3",{attrs:{id:"check-methods"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#check-methods"}},[e._v("#")]),e._v(" Check methods")]),e._v(" "),o("p",[e._v("Methods used to check some attribute of a Node.")]),e._v(" "),o("h4",{attrs:{id:"node-has-root-node-path-path-boolean"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-has-root-node-path-path-boolean"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.has(root: Node, path: Path) => boolean")])]),e._v(" "),o("p",[e._v("Check if a descendant node exists at a specific "),o("code",[e._v("path")]),e._v(".")]),e._v(" "),o("h4",{attrs:{id:"node-isnode-value-any-value-is-node"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-isnode-value-any-value-is-node"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.isNode(value: any) => value is Node")])]),e._v(" "),o("p",[e._v("Check if a "),o("code",[e._v("value")]),e._v(" implements the "),o("code",[e._v("Node")]),e._v(" interface.")]),e._v(" "),o("h4",{attrs:{id:"node-isnodelist-value-any-value-is-node"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-isnodelist-value-any-value-is-node"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.isNodeList(value: any) => value is Node[]")])]),e._v(" "),o("p",[e._v("Check if a "),o("code",[e._v("value")]),e._v(" is a list of "),o("code",[e._v("Node")]),e._v(" objects.")]),e._v(" "),o("h4",{attrs:{id:"node-matches-root-node-props-partial-node-boolean"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#node-matches-root-node-props-partial-node-boolean"}},[e._v("#")]),e._v(" "),o("code",[e._v("Node.matches(root: Node, props: Partial<Node>) => boolean")])]),e._v(" "),o("p",[e._v("Check if a node matches a set of "),o("code",[e._v("props")]),e._v(".")])])}),[],!1,null,null,null);t.default=n.exports}}]);